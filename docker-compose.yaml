services:
  # Flask application service
  flask_service:
    container_name: flask_service
    build:
      context: ./flask_app
      dockerfile: Dockerfile-flask
    ports:
      - "5000:5000"  # Map port 5000 on the host to port 5000 in the container
    depends_on:
      - flask_db_service  # Ensure the database service is started before this service
    environment:
      - DATABASE_URL=postgresql://${FLASK_DB_USER}:${FLASK_DB_PASSWORD}@db:5432/${FLASK_DB_NAME}
    networks:
      - nexfitra_network  # Connect to the custom network

  # Flask application test service
  flask_test_service:
    container_name: flask_test_service
    build:
      context: ./flask_app
      dockerfile: Dockerfile-flask-test
    depends_on:
      - flask_test_db_service  # Ensure the database service is started before this service
    environment:
      - DATABASE_URL=postgresql://${FLASK_TEST_DB_USER}:${FLASK_TEST_DB_PASSWORD}@db:5432/${FLASK_TEST_DB_NAME}
    networks:
      - nexfitra_network  # Connect to the custom network

  react-service:
    container_name: react_service
    build:
      context: ./react_app 
      dockerfile: Dockerfile-react
    command: npm start  # Command to start the React application
    ports:
      - "3000:3000"  # Map port 3000 on the host to port 3000 in the container
    volumes:
      - ./react_app:/app/react_app  # Mount the react_app directory to /app/react_app in the container
      - react_app_node_modules:/app/react_app/node_modules  # Ensure node_modules are not overwritten by the host
    depends_on:
      - flask_service  # Ensure the Flask service is started before this service
    networks:
      - nexfitra_network  # Connect to the custom network

  # FastAPI application service
  fastapi_service:
    container_name: fastapi_service
    build:
      context: ./fastapi_app
      dockerfile: Dockerfile-fastapi
    ports:
      - "8000:8000"  # Map port 8000 on the host to port 8000 in the container
    depends_on:
      - fastapi_db_service  # Ensure the database service is started before this service
    environment:
      - DATABASE_URL=postgresql://${FASTAPI_DB_USER}:${FASTAPI_DB_PASSWORD}@db:5432/${FASTAPI_DB_NAME}
    networks:
      - nexfitra_network  # Connect to the custom network

  # FastAPI application test service
  fastapi_test_service:
    container_name: fastapi_test_service
    build:
      context: ./fastapi_app
      dockerfile: Dockerfile-fastapi-test
    depends_on:
      - fastapi_test_db_service  # Ensure the database service is started before this service
    environment:
      - DATABASE_URL=postgresql://${FASTAPI_DB_USER}:${FASTAPI_DB_PASSWORD}@db:5432/${FASTAPI_DB_NAME}
    command: ["poetry", "run", "pytest", "-v"]  # Run tests with pytest
    networks:
      - nexfitra_network  # Connect to the custom network

  # PostgreSQL database service for Flask
  flask_db_service:
    container_name: flask_db_service
    image: postgres:16
    environment:
      POSTGRES_USER: ${FLASK_DB_USER}
      POSTGRES_PASSWORD: ${FLASK_DB_PASSWORD}
      POSTGRES_DB: ${FLASK_DB_NAME} 
    ports:
      - "5432:5432"  # Map port 5432 on the host to port 5432 in the container
    volumes:
      - flask_postgres_data:/var/lib/postgresql/data  # Persist database data
    networks:
      - nexfitra_network  # Connect to the custom network
  
  # PostgreSQL database service for the Flask test service
  flask_test_db_service:
    container_name: flask_test_db_service
    image: postgres:16
    environment:
      POSTGRES_USER: ${FLASK_TEST_DB_USER}
      POSTGRES_PASSWORD: ${FLASK_TEST_DB_PASSWORD}
      POSTGRES_DB: ${FLASK_TEST_DB_NAME}
    ports:
      - "5433:5432"  # Map port 5433 on the host to port 5432 in the container
    volumes:
      - flask_test_postgres_data:/var/lib/postgresql/data  # Persist database data
    networks:
      - nexfitra_network  # Connect to the custom network

  # PostgreSQL database service for FastAPI
  fastapi_db_service:
    container_name: fastapi_db_service
    image: postgres:16
    environment:
      POSTGRES_USER: ${FASTAPI_DB_USER}
      POSTGRES_PASSWORD: ${FASTAPI_DB_PASSWORD}
      POSTGRES_DB: ${FASTAPI_DB_NAME}
    ports:
      - "5434:5432"  # Map port 5434 on the host to port 5432 in the container
    volumes:
      - fastapi_postgres_data:/var/lib/postgresql/data  # Persist database data
    networks:
      - nexfitra_network  # Connect to the custom network
  
  # PostgreSQL database service for FastAPI test service
  fastapi_test_db_service:
    container_name: fastapi_test_db_service
    image: postgres:16
    environment:
      POSTGRES_USER: ${FASTAPI_TEST_DB_USER}
      POSTGRES_PASSWORD: ${FASTAPI_TEST_DB_PASSWORD}
      POSTGRES_DB: ${FASTAPI_TEST_DB_NAME}
    ports:
      - "5435:5432"  # Map port 5435 on the host to port 5432 in the container
    volumes:
      - fastapi_test_postgres_data:/var/lib/postgresql/data  # Persist database data
    networks:
      - nexfitra_network  # Connect to the custom network

  # pgAdmin service for managing PostgreSQL
  pgadmin_service:
    container_name: pgadmin_service
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"  # Map port 5050 on the host to port 80 in the container
    depends_on:
      - flask_db_service   # Ensure the database service is started before this service
      - flask_test_db_service
      - fastapi_db_service
      - fastapi_test_db_service  
    volumes:
      - pgadmin_data:/var/lib/pgadmin  # Persist pgAdmin data
    networks:
      - nexfitra_network  # Connect to the custom network

  # Airflow Init Service
  airflow_init:
    build:
      context: ./airflow_app
      dockerfile: Dockerfile-airflow
    container_name: airflow_init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow_db:5432/${AIRFLOW_DB_NAME}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    command: ["bash", "/entrypoint.sh"]
    networks:
      - nexfitra_network
    env_file:
      - .env
    restart: "no"

  # Airflow Scheduler
  airflow_scheduler:
    build:
      context: ./airflow_app
      dockerfile: Dockerfile-airflow
    container_name: airflow_scheduler
    depends_on:
      - airflow_db
      - airflow_init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow_db:5432/${AIRFLOW_DB_NAME}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
    volumes:
      - airflow_dags:/opt/airflow/dags  # DAG files for Airflow tasks
      - airflow_logs:/opt/airflow/logs  # Logs for monitoring
    command: ["airflow", "scheduler"]
    networks:
      - nexfitra_network
    env_file:
      - .env

  # Airflow Webserver
  airflow_webserver:
    build:
      context: ./airflow_app
      dockerfile: Dockerfile-airflow
    container_name: airflow_webserver
    depends_on:
      - airflow_db
      - airflow_scheduler
      - airflow_init
    ports:
      - "8080:8080"  # Map port 8080 on the host to port 8080 in the container
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow_db:5432/${AIRFLOW_DB_NAME}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
    volumes:
      - airflow_dags:/opt/airflow/dags  # DAG files for Airflow tasks
      - airflow_logs:/opt/airflow/logs  # Logs for monitoring
    command: ["airflow", "webserver"]
    networks:
      - nexfitra_network
    env_file:
      - .env
  
  # Airflow Database (Postgres)
  airflow_db:
    image: postgres:16
    container_name: airflow_db
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_DB_NAME}
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data  # Persist database data
    networks:
      - nexfitra_network
    
  # Airflow Test Service
  airflow_test:
    build:
      context: ./airflow_app
      dockerfile: Dockerfile-airflow-test
    container_name: airflow_test
    depends_on:
      - airflow_test_db
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${AIRFLOW_TEST_DB_USER}:${AIRFLOW_TEST_DB_PASSWORD}@airflow_test_db:5432/${AIRFLOW_TEST_DB_NAME}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./airflow_app/tests:/opt/airflow/tests  # Mount the tests directory
    networks:
      - nexfitra_network
    env_file:
      - .env
    restart: "no"


  # Airflow Test Database (Postgres)
  airflow_test_db:
    image: postgres:16
    container_name: airflow_test_db
    environment:
      POSTGRES_USER: ${AIRFLOW_TEST_DB_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_TEST_DB_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_TEST_DB_NAME}
    volumes:
      - airflow_test_postgres_data:/var/lib/postgresql/data  # Persist test database data
    networks:
      - nexfitra_network

  # USDA Database (Postgres)
  usda_db:
    image: postgres:16
    container_name: usda_db
    environment:
      POSTGRES_USER: ${USDA_DB_USER}
      POSTGRES_PASSWORD: ${USDA_DB_PASSWORD}
      POSTGRES_DB: ${USDA_DB_NAME}
      USDA_DB_AIRFLOW_USER: ${USDA_DB_AIRFLOW_USER}
      USDA_DB_AIRFLOW_PASSWORD: ${USDA_DB_AIRFLOW_PASSWORD}
    volumes:
      - usda_postgres_data:/var/lib/postgresql/data  # Persist USDA database data
      - ./usda_db/init-scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - nexfitra_network

# Define named volumes for persistent data storage
volumes:
  flask_postgres_data:
  flask_test_postgres_data:
  fastapi_postgres_data:
  fastapi_test_postgres_data:
  pgadmin_data:
  react_app_node_modules:
  airflow_postgres_data:
  airflow_test_postgres_data:
  airflow_logs:
  airflow_dags:
  usda_postgres_data:

# Define a custom network for the services
networks:
  nexfitra_network: